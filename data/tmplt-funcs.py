#THIS IS INSERTED INTO EVERY HTML FILE BEFORE PROCESSED BY GENSHI!
################################################################################
from genshi.builder import tag
import markdown
import markdown.extensions.tables
import datetime
import random
#Yeah, it's hard-coded. Sorry, I guess.
data_dir = '/home/keith/Code/Python/keithstellyesdotcom/data/'
md_extensions = ['markdown.extensions.tables']
#A major catch-all function that is useful for simple writing of files.
#If it's a markdown file, compile it to HTML then return that raw HTML
#If it's an HTML file, return that
#Otherwise, assume it's a raw text file that Genshi should escape the chars for.
#Note that all Markup() does is tell Genshi to not escape the text (that is,
#   treat it as raw HTML) Also, the markdown compiler automatically escapes,
#   so we can trust Markup() on it.
def get_html(f):
    ff = data_dir + f
    s = open(ff,'r').read()
    if f.endswith('.md'):
        md = markdown.markdown(s,extensions=md_extensions)
        return Markup(md)
    if f.endswith('.html'):
        return Markup(s)
    else:
        return s
def get_tablehtml(f):
    #This is to get rid of the <table> generated by markdown.markdown()
    #    as this will conflict with our beautiful bootstrap tables.
    ff = data_dir + f
    s = open(ff,'r').read()
    md = markdown.markdown(s,extensions=md_extensions)
    md = md.replace('<table>','')
    md = md.replace('</table>','')
    return Markup(md)
def set_title_etc(s):
    titl = '''<!--\n{1}\nYour lucky number for today: {2}\n-->\n<head>
      <title>{0}</title>
      <meta charset="utf-8"></meta>
      <meta name="viewport" content="width=device-width, initial-scale=1"></meta>
      <link rel="stylesheet" href="style.css"></link>
    </head>'''

    s = titl.format(s,str(datetime.datetime.now()),str(random.randint(1,100)))
    return Markup(s)

def closing_tag(s):
    #We can't use </div> as a string arg, and Genshi requires perfect XML-style
    #   Incredibly hacky, but too late now. Also, other more simple hacks, like,
    #   ${str('</div>')} throw errors. Seems to be an error with the parsing.
    #   fascinatingly, this issue does not occur within the <? python block.
    return Markup('</' + s + '>')

################################################################################
